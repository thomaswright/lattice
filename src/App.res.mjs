// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var empty = Core__Array.make(40, false).map(function (param) {
        return Core__Array.make(40, false);
      });
  var withVals = empty.map(function (a) {
        return a.map(function (param) {
                    var x = Math.random();
                    if (x < 0.25) {
                      return "red";
                    } else if (x < 0.50) {
                      return "blue";
                    } else if (x < 0.75) {
                      return "yellow";
                    } else {
                      return "black";
                    }
                  });
      });
  var reflected = withVals.map(function (a, i) {
        return a.map(function (param, j) {
                    var oI = i > 19 ? 39 - i | 0 : i;
                    var oJ = j > 19 ? 39 - j | 0 : j;
                    var flip = oI > oJ;
                    return withVals[flip ? oI : oJ][flip ? oJ : oI];
                  });
      });
  var paths = Belt_Array.keepMap(Belt_Array.concatMany(reflected.map(function (a, i) {
                  return a.map(function (v, j) {
                              if ((i + j | 0) % 2 === 0 || v === "red" || v === "blue" || i > 20 || j > 20 || i > j) {
                                return ;
                              }
                              var direction = j % 2 === 0 ? "h" : "v";
                              var x = j % 2 === 0 ? (i - 1 | 0) / 2 | 0 : i / 2 | 0;
                              var y = i % 2 === 0 ? (j - 1 | 0) / 2 | 0 : j / 2 | 0;
                              return "M " + (Math.imul(x, 50) - (
                                          j % 2 === 0 ? 10 : 0
                                        ) | 0).toString() + "," + (Math.imul(y, 50) - (
                                          j % 2 === 1 ? 10 : 0
                                        ) | 0).toString() + " " + direction + " " + (70).toString();
                            });
                })), (function (x) {
            return x;
          })).join(" ");
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("svg", {
                            children: JsxRuntime.jsx("g", {
                                  children: [
                                      "",
                                      "rotate(90, 500, 500)",
                                      "rotate(180, 500, 500)",
                                      "rotate(270, 500, 500)",
                                      "rotate(90, 0, 0) scale(1,-1)",
                                      "rotate(90, 0, 0) scale(1,-1) rotate(90, 500, 500)",
                                      "rotate(90, 0, 0) scale(1,-1) rotate(180, 500, 500)",
                                      "rotate(90, 0, 0) scale(1,-1) rotate(270, 500, 500)"
                                    ].map(function (transform) {
                                        return JsxRuntime.jsx("path", {
                                                    d: paths,
                                                    fill: "none",
                                                    stroke: "red",
                                                    strokeWidth: (20).toString(),
                                                    transform: transform
                                                  });
                                      }),
                                  transform: "translate(10, 10)"
                                }),
                            viewBox: "0 0 1020 1020",
                            xmlns: "http://www.w3.org/2000/svg"
                          }),
                      className: "w-80 p-2"
                    }),
                JsxRuntime.jsx("div", {
                      children: reflected.map(function (a, i) {
                            return a.map(function (v, j) {
                                        return JsxRuntime.jsx("div", {
                                                    className: " absolute",
                                                    style: {
                                                      backgroundColor: v,
                                                      height: "9px",
                                                      left: Math.imul(j, 10).toString() + "px",
                                                      top: Math.imul(i, 10).toString() + "px",
                                                      width: "9px"
                                                    }
                                                  });
                                      });
                          }),
                      className: "relative"
                    })
              ],
              className: "p-6 "
            });
}

var make = App;

export {
  make ,
}
/* react/jsx-runtime Not a pure module */
