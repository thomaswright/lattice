// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Color from "@texel/color";
import DownloadSvgJs from "./downloadSvg.js";
import * as JsxRuntime from "react/jsx-runtime";

function random(a, b) {
  return Math.random() * (b - a) + a;
}

function randomInt(a, b) {
  return Math.random() * (b - a) + a | 0;
}

function intAbs(a, b) {
  if (a > b) {
    return a - b | 0;
  } else {
    return b - a | 0;
  }
}

function dist(param, param$1) {
  var dx = param$1[0] - param[0] | 0;
  var dy = param$1[1] - param[1] | 0;
  return Math.sqrt(dx * dx + dy * dy) | 0;
}

function getShapeFilter(gridNum) {
  var cutoff = Math.random();
  return function (i, j) {
    var inCircle = dist([
          gridNum / 2 | 0,
          gridNum / 2 | 0
        ], [
          i,
          j
        ]) > (gridNum / 2 | 0);
    var inDiamond = (intAbs(gridNum / 2 | 0, i) + intAbs(gridNum / 2 | 0, j) | 0) > (gridNum / 2 | 0);
    if (cutoff < 0.1) {
      return !inCircle;
    } else if (cutoff < 0.2) {
      return !inDiamond;
    } else if (cutoff < 0.4) {
      return inCircle;
    } else if (cutoff < 0.6) {
      return inDiamond;
    } else {
      return false;
    }
  };
}

function getColorPair() {
  var h1 = random(0, 360);
  var h2 = random(0, 360);
  var flipD = Math.random() > 0.5;
  var v1 = random(flipD ? 0.6 : 0.8, 1.0);
  var v2 = random(0.0, flipD ? 0.2 : 0.4);
  var c1 = random(0.8, 1.0);
  var c2 = random(0.8, 1.0);
  var flipV = Math.random() > 0.5;
  var flipSpace = Math.random() > 0.5;
  var color1 = Color.RGBToHex(Color.convert([
            h1,
            c1,
            flipV ? v1 : v2
          ], flipSpace ? Color.OKHSL : Color.OKHSV, Color.sRGB));
  var color2 = Color.RGBToHex(Color.convert([
            h2,
            c2,
            flipV ? v2 : v1
          ], flipSpace ? Color.OKHSL : Color.OKHSV, Color.sRGB));
  return [
          color1,
          color2,
          flipV
        ];
}

function App$Lattice(props) {
  var svgRef = React.useRef(null);
  var gridNum = randomInt(8, 80);
  var cutoff = random(0.1, 0.5);
  var strokeWidth = random(0.4, 1.8) * (1000 / gridNum) | 0;
  var length = Caml_int32.div(2000, gridNum);
  var empty = Core__Array.make(gridNum, false).map(function (param) {
        return Core__Array.make(gridNum, false);
      });
  var withVals = empty.map(function (a) {
        return a.map(function (param) {
                    return Math.random();
                  });
      });
  var shapeFilter = getShapeFilter(gridNum);
  var id = Belt_Array.keepMap(Belt_Array.concatMany(withVals.map(function (a, i) {
                return a.map(function (v, j) {
                            if ((i + j | 0) % 2 === 0 || v > cutoff || i > (gridNum / 2 | 0) || j > (gridNum / 2 | 0) || i > j || shapeFilter(i, j)) {
                              return ;
                            } else {
                              return [
                                      i,
                                      j
                                    ];
                            }
                          });
              })), (function (x) {
          return x;
        }));
  var paths = id.map(function (param) {
          var j = param[1];
          var i = param[0];
          var direction = j % 2 === 0 ? "h" : "v";
          var x = j % 2 === 0 ? (i - 1 | 0) / 2 | 0 : i / 2 | 0;
          var y = i % 2 === 0 ? (j - 1 | 0) / 2 | 0 : j / 2 | 0;
          return "M " + (Math.imul(x, length) - (
                      j % 2 === 0 ? strokeWidth / 2 | 0 : 0
                    ) | 0).toString() + "," + (Math.imul(y, length) - (
                      j % 2 === 1 ? strokeWidth / 2 | 0 : 0
                    ) | 0).toString() + " " + direction + " " + (length + strokeWidth | 0).toString();
        }).join(" ");
  var match = getColorPair();
  var color = match[0];
  var padding = random(0.2, 0.5) * 1000 | 0;
  var viewBoxSize = ((1000 + strokeWidth | 0) + padding | 0).toString();
  var viewBoxAdjustment = ((strokeWidth + padding | 0) / 2 | 0).toString();
  if (paths === "") {
    return null;
  } else {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsxs("svg", {
                      children: [
                        JsxRuntime.jsx("rect", {
                              height: viewBoxSize,
                              width: viewBoxSize,
                              fill: match[1],
                              x: "0",
                              y: "0"
                            }),
                        JsxRuntime.jsx("g", {
                              children: [
                                  "",
                                  "rotate(90, 500, 500)",
                                  "rotate(180, 500, 500)",
                                  "rotate(270, 500, 500)",
                                  "rotate(90, 0, 0) scale(1,-1)",
                                  "rotate(90, 0, 0) scale(1,-1) rotate(90, 500, 500)",
                                  "rotate(90, 0, 0) scale(1,-1) rotate(180, 500, 500)",
                                  "rotate(90, 0, 0) scale(1,-1) rotate(270, 500, 500)"
                                ].map(function (transform) {
                                    return JsxRuntime.jsx("path", {
                                                d: paths,
                                                fill: "none",
                                                stroke: color,
                                                strokeWidth: strokeWidth.toString(),
                                                transform: transform
                                              });
                                  }),
                              transform: "translate(" + viewBoxAdjustment + ", " + viewBoxAdjustment + ")"
                            })
                      ],
                      ref: Caml_option.some(svgRef),
                      viewBox: "0 0 " + viewBoxSize + " " + viewBoxSize,
                      xmlns: "http://www.w3.org/2000/svg"
                    }),
                className: "w-80 sm:w-40 m-6",
                onClick: (function (param) {
                    DownloadSvgJs(svgRef.current);
                  })
              });
  }
}

function App(props) {
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: "Lattice",
                              className: "font-thin font-serif uppercase text-5xl mb-4 border-4 border-gray-900 w-fit px-8 py-4",
                              style: {
                                letterSpacing: "0.2em"
                              }
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                "A generative art project by ",
                                JsxRuntime.jsx("a", {
                                      children: "Thomas Wright",
                                      className: " font-black text-gray-900",
                                      href: "https://github.com/thomaswright/lattice"
                                    })
                              ],
                              className: "uppercase text-sm text-gray-900"
                            })
                      ],
                      className: "flex flex-col items-center justify-center text-gray-900 border-gray-900 bg-gray-100 py-8 "
                    }),
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(100, false).map(function (param) {
                            return JsxRuntime.jsx(App$Lattice, {});
                          }),
                      className: "p-6 flex flex-row flex-wrap bg-gray-100 justify-center"
                    })
              ]
            });
}

var make = App;

export {
  make ,
}
/* react Not a pure module */
